name: Copilot Setup Steps

# This workflow provides all the steps necessary to setup a Ruby 3.4.5 and Rails 8.0.2
# development environment with PostgreSQL for GitHub Copilot to understand and use.

on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  copilot-setup-steps:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Install system dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y \
            build-essential \
            git \
            libpq-dev \
            libyaml-dev \
            pkg-config \
            postgresql-client \
            curl \
            nodejs \
            npm

      # Step 3: Set up Ruby 3.4.5 with bundler caching
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version  # Uses Ruby 3.4.5 from .ruby-version file
          bundler-cache: true          # Automatically runs bundle install and caches gems

      # Step 4: Verify Ruby and Rails versions
      - name: Verify Ruby and Rails versions
        run: |
          echo "Ruby version:"
          ruby --version
          echo "Rails version:"
          bundle exec rails --version
          echo "Bundler version:"
          bundle --version

      # Step 5: Install JavaScript dependencies
      - name: Install npm dependencies  
        run: npm install

      # Step 5.5: Wait for PostgreSQL to be ready
      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready!"

      # Step 6: Set up the database
      - name: Setup database
        env:
          DATABASE_USERNAME: postgres
          DATABASE_PASSWORD: postgres
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
        run: |
          echo "Creating development and test databases..."
          # Create databases using Rails
          RAILS_ENV=development bundle exec rails db:create
          RAILS_ENV=test bundle exec rails db:create
          
          echo "Running database migrations..."
          RAILS_ENV=development bundle exec rails db:migrate
          
          echo "Database setup completed successfully!"

      # Step 7: Install RSpec (if not already configured)
      - name: Generate RSpec configuration
        run: |
          if [ ! -f spec/rails_helper.rb ]; then
            bundle exec rails generate rspec:install
          fi

      # Step 8: Precompile assets (for production-like setup)
      - name: Precompile assets
        env:
          RAILS_ENV: development
          DATABASE_USERNAME: postgres
          DATABASE_PASSWORD: postgres
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
        run: bundle exec rails assets:precompile

      # Step 9: Run security and code quality checks
      - name: Run Brakeman security scan
        run: bundle exec brakeman --no-pager

      - name: Run RuboCop linting
        run: bundle exec rubocop

      # Step 10: Run JavaScript tests
      - name: Run Jest tests
        run: npm test

      # Step 11: Run Rails tests and RSpec tests
      - name: Setup test database and run tests
        env:
          DATABASE_USERNAME: postgres
          DATABASE_PASSWORD: postgres
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
        run: |
          echo "Preparing test database..."
          RAILS_ENV=test bundle exec rails db:test:prepare
          
          echo "Running Rails tests..."
          bundle exec rails test
          bundle exec rails test:system
          
          echo "Running RSpec tests..."
          if [ -f spec/rails_helper.rb ]; then
            bundle exec rspec
          else
            echo "RSpec not configured yet, skipping..."
          fi

      # Step 13: Display setup summary
      - name: Development environment setup summary
        run: |
          echo "ðŸŽ‰ Development environment setup completed successfully!"
          echo ""
          echo "Environment Details:"
          echo "- Ruby: $(ruby --version)"
          echo "- Rails: $(bundle exec rails --version)"
          echo "- PostgreSQL: $(psql --version | head -1)"
          echo "- Bundler: $(bundle --version)"
          echo "- Node.js: $(node --version)"
          echo "- npm: $(npm --version)"
          echo ""
          echo "Database Configuration:"
          echo "- Development DB: qalab_development"
          echo "- Test DB: qalab_test"
          echo "- PostgreSQL running on localhost:5432"
          echo ""
          echo "Testing Frameworks:"
          echo "- Rails Test Suite: âœ“ Configured"
          echo "- RSpec: $(if [ -f spec/rails_helper.rb ]; then echo 'âœ“ Configured'; else echo 'âš  Available but not configured'; fi)"
          echo "- Jest: âœ“ Configured"
          echo ""
          echo "Available Commands:"
          echo "- bin/dev (start development server)"
          echo "- bin/rails server (alternative server start)"
          echo "- bin/rails console (Rails console)"
          echo "- bin/rails test (run Rails tests)"
          echo "- bundle exec rspec (run RSpec tests)"
          echo "- npm test (run Jest tests)"
          echo "- bin/rails db:create (create database)"
          echo "- bin/rails db:migrate (run migrations)"
          echo "- bin/rubocop (code linting)"
          echo "- bin/brakeman (security scanning)"
          echo "- bin/setup (run complete setup script)"